using System;
using System.Drawing;
using NUnit.Framework;

namespace Manipulation
{
    public static class AnglesToCoordinatesTask
    {
        public static PointF[] GetJointPositions(double shoulder, double elbow, double wrist)
        {
            var elbowX = UpperArm * Cos(shoulder);
            var elbowY = UpperArm * Sin(shoulder);
            var elbowPos = new PointF((float) elbowX, (float) elbowY);

            var angle2 = elbow + shoulder - PI;
            var wristX = Forearm * Cos(angle2) + elbowX;
            var wristY = Forearm * Sin(angle2) + elbowY;
            var wristPos = new PointF((float) wristX, (float) wristY);

            var angle3 = wrist + angle2 - PI;
            var palmX = Palm * Cos(angle3) + wristX;
            var palmY = Palm * Sin(angle3) + wristY;
            var palmEndPos = new PointF((float) palmX, (float) palmY);
            return new PointF[]
            {
                elbowPos,
                wristPos,
                palmEndPos
            };
        }
		
        public static SizeF CoordinatesOfAngle(double segment, double angle)
        {
            return new SizeF((float)(segment * Math.Cos(angle)), (float)(segment * Math.Sin(angle)));
        }
    }

    [TestFixture]
    public class AnglesToCoordinatesTask_Tests
    {
        public static float TestLength(PointF point1, PointF point2)
        {
            var lengthSegmentInX = (point1.X - point2.X) * (point1.X - point2.X);
            var lengthSegmentInY = (point1.Y - point2.Y) * (point1.Y - point2.Y);
            return (float)Math.Sqrt( lengthSegmentInX + lengthSegmentInY);
        }
		
        [TestCase(Math.PI / 2, Math.PI / 2, Math.PI, Manipulator.Forearm + Manipulator.Palm, Manipulator.UpperArm)]
        [TestCase(Math.PI / 2, Math.PI / 2, Math.PI / 2, Manipulator.Forearm, Manipulator.UpperArm - Manipulator.Palm)]
        [TestCase(Math.PI / 2, Math.PI, Math.PI, 0.0, Manipulator.UpperArm + Manipulator.Forearm + Manipulator.Palm)]
        [TestCase(Math.PI / 2, Math.PI, 2 * Math.PI, 0, Manipulator.UpperArm + Manipulator.Forearm - Manipulator.Palm)]
        public void TestGetJointPositions(double shoulder, double elbow, double wrist, double palmEndX, double palmEndY)
        {
            var joints = AnglesToCoordinatesTask.GetJointPositions(shoulder, elbow, wrist);
            Assert.AreEqual(palmEndX, joints[2].X, 1e-5, "palm endX");
            Assert.AreEqual(palmEndY, joints[2].Y, 1e-5, "palm endY");
            Assert.AreEqual(Manipulator.Forearm, TestLength(joints[1], joints[0]));
            Assert.AreEqual(Manipulator.Palm, TestLength(joints[2], joints[1]));
            Assert.AreEqual(Manipulator.UpperArm, TestLength(joints[0], new PointF(0, 0)));
        }
    }
}
